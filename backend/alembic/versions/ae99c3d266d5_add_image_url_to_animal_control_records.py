"""add_image_url_to_animal_control_records

Revision ID: ae99c3d266d5
Revises: fe0b3e51a11d
Create Date: 2025-10-24 00:42:07.079154

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'ae99c3d266d5'
down_revision = 'fe0b3e51a11d'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('animal_control_records', sa.Column('image_url', sa.String(length=500), nullable=True))
    op.alter_column('appointments', 'date',
               existing_type=sa.DATE(),
               type_=sa.String(length=255),
               existing_nullable=False)
    op.alter_column('appointments', 'time',
               existing_type=postgresql.TIME(),
               type_=sa.String(length=255),
               existing_nullable=False)
    op.drop_constraint('appointments_user_id_fkey', 'appointments', type_='foreignkey')
    op.drop_constraint('appointments_pet_id_fkey', 'appointments', type_='foreignkey')
    op.alter_column('medical_records', 'date',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=False)
    op.alter_column('medical_records', 'next_due_date',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.drop_constraint('medical_records_user_id_fkey', 'medical_records', type_='foreignkey')
    op.drop_constraint('medical_records_pet_id_fkey', 'medical_records', type_='foreignkey')
    op.alter_column('pain_assessments', 'pet_name',
               existing_type=sa.VARCHAR(length=255),
               nullable=True)
    op.alter_column('pain_assessments', 'pet_type',
               existing_type=sa.VARCHAR(length=255),
               nullable=True)
    op.alter_column('pain_assessments', 'pain_score',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('pain_assessments', 'assessment_date',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.DateTime(timezone=True),
               nullable=True)
    op.alter_column('pain_assessments', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.drop_constraint('pain_assessments_user_id_fkey', 'pain_assessments', type_='foreignkey')
    op.drop_constraint('pain_assessments_pet_id_fkey', 'pain_assessments', type_='foreignkey')
    op.alter_column('pets', 'date_of_birth',
               existing_type=sa.DATE(),
               type_=sa.String(length=255),
               existing_nullable=True)
    op.drop_index('ix_pets_pet_id', table_name='pets')
    op.alter_column('users', 'name',
               existing_type=sa.VARCHAR(length=255),
               nullable=True)
    op.alter_column('users', 'reset_token_expiry',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('vaccination_events', 'event_date',
               existing_type=sa.DATE(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column('vaccination_records', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('vaccination_records', 'date_given',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('vaccination_records', 'next_due_date',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('vaccination_records', 'veterinarian',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.drop_constraint('vaccination_records_user_id_fkey', 'vaccination_records', type_='foreignkey')
    op.drop_constraint('vaccination_records_pet_id_fkey', 'vaccination_records', type_='foreignkey')
    op.drop_column('vaccination_records', 'vaccination_date')
    op.drop_column('vaccination_records', 'expiration_date')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('vaccination_records', sa.Column('expiration_date', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('vaccination_records', sa.Column('vaccination_date', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.create_foreign_key('vaccination_records_pet_id_fkey', 'vaccination_records', 'pets', ['pet_id'], ['id'])
    op.create_foreign_key('vaccination_records_user_id_fkey', 'vaccination_records', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.alter_column('vaccination_records', 'veterinarian',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('vaccination_records', 'next_due_date',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('vaccination_records', 'date_given',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('vaccination_records', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('vaccination_events', 'event_date',
               existing_type=sa.DateTime(timezone=True),
               type_=sa.DATE(),
               existing_nullable=False)
    op.alter_column('users', 'reset_token_expiry',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('users', 'name',
               existing_type=sa.VARCHAR(length=255),
               nullable=False)
    op.create_index('ix_pets_pet_id', 'pets', ['pet_id'], unique=False)
    op.alter_column('pets', 'date_of_birth',
               existing_type=sa.String(length=255),
               type_=sa.DATE(),
               existing_nullable=True)
    op.create_foreign_key('pain_assessments_pet_id_fkey', 'pain_assessments', 'pets', ['pet_id'], ['id'])
    op.create_foreign_key('pain_assessments_user_id_fkey', 'pain_assessments', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.alter_column('pain_assessments', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('pain_assessments', 'assessment_date',
               existing_type=sa.DateTime(timezone=True),
               type_=sa.VARCHAR(length=255),
               nullable=False)
    op.alter_column('pain_assessments', 'pain_score',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('pain_assessments', 'pet_type',
               existing_type=sa.VARCHAR(length=255),
               nullable=False)
    op.alter_column('pain_assessments', 'pet_name',
               existing_type=sa.VARCHAR(length=255),
               nullable=False)
    op.create_foreign_key('medical_records_pet_id_fkey', 'medical_records', 'pets', ['pet_id'], ['id'])
    op.create_foreign_key('medical_records_user_id_fkey', 'medical_records', 'users', ['user_id'], ['id'])
    op.alter_column('medical_records', 'next_due_date',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('medical_records', 'date',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True)
    op.create_foreign_key('appointments_pet_id_fkey', 'appointments', 'pets', ['pet_id'], ['id'])
    op.create_foreign_key('appointments_user_id_fkey', 'appointments', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.alter_column('appointments', 'time',
               existing_type=sa.String(length=255),
               type_=postgresql.TIME(),
               existing_nullable=False)
    op.alter_column('appointments', 'date',
               existing_type=sa.String(length=255),
               type_=sa.DATE(),
               existing_nullable=False)
    op.drop_column('animal_control_records', 'image_url')
    # ### end Alembic commands ### 